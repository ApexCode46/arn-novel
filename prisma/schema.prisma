generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid()) @map("user_id")
  name            String?           @default("")
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  role            String            @default("user")
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Session         Session[]
  accounts        Account[]
  chapterComments chapterComments[]
  favorite        favorite[]
  follow          follow[]
  stories         stories[]
  storyComments   storyComments[]
  voice           voice[]
  wallet          wallet?

  @@map("users")
}

model Account {
  id                String   @id @default(cuid()) @map("account_id")
  userId            String   @map("user_id")
  type              String   @default("credentials")
  provider          String   @default("local")
  providerAccountId String?
  email             String?
  password          String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model stories {
  story_id          String   @id @default(cuid())
  user_id           String
  user              User     @relation(fields: [user_id], references: [id])
  penName           String
  title             String
  blurb             String?
  category          String
  tags              String[]
  storyInfo         String?   @db.Text
  verticalImage     String
  horizontalImage   String?
  hideComments      Boolean
  allowComments     Boolean
  commentPermission String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  chapter       chapters[]
  favorite      favorite[]
  follow        follow[]
  storyComments storyComments[]
  voice         voice[]
}

model chapters {
  chapter_id String   @id @default(cuid())
  story_id   String
  story      stories  @relation(fields: [story_id], references: [story_id])
  title      String
  content    String
  price      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  chapterComments chapterComments[]
  favorite        favorite[]
  transaction     transaction[]
}

model voice {
  voice_id    String        @id @default(cuid())
  user_id     String
  story_id    String
  transaction transaction[]
  story       stories       @relation(fields: [story_id], references: [story_id])
  user        User          @relation(fields: [user_id], references: [id])
}

model storyComments {
  storyComment_id String   @id @default(cuid())
  user_id         String
  story_id        String
  content         String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  story           stories  @relation(fields: [story_id], references: [story_id])
  user            User     @relation(fields: [user_id], references: [id])
}

model chapterComments {
  chapterComment_id String   @id @default(cuid())
  user_id           String
  chapter_id        String
  content           String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  chapter           chapters @relation(fields: [chapter_id], references: [chapter_id])
  user              User     @relation(fields: [user_id], references: [id])
}

model follow {
  follow_id  String   @id @default(cuid())
  user_id    String
  story_id   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  story      stories  @relation(fields: [story_id], references: [story_id])
  user       User     @relation(fields: [user_id], references: [id])
}

model favorite {
  favorite_id String    @id @default(cuid())
  user_id     String
  story_id    String?
  chapter_id  String?
  chapter     chapters? @relation(fields: [chapter_id], references: [chapter_id])
  story       stories?  @relation(fields: [story_id], references: [story_id])
  user        User      @relation(fields: [user_id], references: [id])
}

model wallet {
  wallet_id   String        @id @default(cuid())
  user_id     String        @unique
  balance     Int           @default(0)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  transaction transaction[]
  user        User          @relation(fields: [user_id], references: [id])
}

model transaction {
  transaction_id String          @id @default(cuid())
  wallet_id      String
  amount         Int
  type           TransactionType
  chapter_id     String?
  voice_id       String?
  created_at     DateTime        @default(now())
  chapter        chapters?       @relation(fields: [chapter_id], references: [chapter_id])
  voice          voice?          @relation(fields: [voice_id], references: [voice_id])
  wallet         wallet          @relation(fields: [wallet_id], references: [wallet_id])
}

enum TransactionType {
  TOPUP
  PURCHASE
  REFUND
  BONUS
}
